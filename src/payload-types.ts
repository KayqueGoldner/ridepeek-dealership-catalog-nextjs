/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    hero: Hero;
    cars: Car;
    manufacturers: Manufacturer;
    motorcycles: Motorcycle;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    hero: HeroSelect<false> | HeroSelect<true>;
    cars: CarsSelect<false> | CarsSelect<true>;
    manufacturers: ManufacturersSelect<false> | ManufacturersSelect<true>;
    motorcycles: MotorcyclesSelect<false> | MotorcyclesSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  fileId?: string | null;
  _key?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "hero".
 */
export interface Hero {
  id: string;
  title: string;
  description: string;
  image?: (string | null) | Media;
  cta?:
    | {
        label: string;
        url: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cars".
 */
export interface Car {
  id: string;
  name: string;
  /**
   * Select an existing manufacturer or create a new one
   */
  make: {
    relationTo: 'manufacturers';
    value: string | Manufacturer;
  };
  /**
   * The model of the car (e.g., Camry, F-150, 3 Series)
   */
  model: string;
  /**
   * Year the car was manufactured
   */
  year: number;
  /**
   * Price in dollars (USD)
   */
  price: number;
  condition: 'new' | 'used' | 'certified';
  /**
   * Odometer reading in miles
   */
  mileage?: number | null;
  /**
   * Notable features of the vehicle
   */
  features?:
    | {
        feature: string;
        id?: string | null;
      }[]
    | null;
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Vehicle images
   */
  images?:
    | {
        image: string | Media;
        caption?: string | null;
        /**
         * Use this image as the main image for the vehicle
         */
        primary?: boolean | null;
        id?: string | null;
      }[]
    | null;
  specifications?: {
    /**
     * e.g., V6, 4-cylinder, Electric
     */
    engineType?: string | null;
    transmission?: ('automatic' | 'manual' | 'cvt' | 'electric') | null;
    fuelType?: ('gasoline' | 'diesel' | 'electric' | 'hybrid' | 'plugin_hybrid') | null;
    /**
     * Fuel economy in miles per gallon
     */
    mpg?: {
      city?: number | null;
      highway?: number | null;
      combined?: number | null;
    };
    /**
     * Range in miles (for electric vehicles)
     */
    electricRange?: number | null;
    color?: {
      exterior?: string | null;
      interior?: string | null;
    };
  };
  availability: 'in_stock' | 'on_order' | 'sold';
  /**
   * Vehicle Identification Number
   */
  vin?: string | null;
  /**
   * Feature this vehicle on the homepage
   */
  featured?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "manufacturers".
 */
export interface Manufacturer {
  id: string;
  /**
   * The name of the manufacturer (e.g., Toyota, Ford, BMW)
   */
  name: string;
  /**
   * The country of origin for the manufacturer
   */
  country?: string | null;
  /**
   * The manufacturer's logo
   */
  logo?: (string | null) | Media;
  /**
   * A brief description of the manufacturer
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Vehicle types manufactured by this manufacturer
   */
  vehicleTypes: 'cars' | 'motorcycles' | 'both';
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "motorcycles".
 */
export interface Motorcycle {
  id: string;
  name: string;
  /**
   * Select an existing manufacturer or create a new one
   */
  manufacturer: {
    relationTo: 'manufacturers';
    value: string | Manufacturer;
  };
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Year the motorcycle was manufactured
   */
  year: number;
  /**
   * Price in dollars (USD)
   */
  price: number;
  featured?: boolean | null;
  hidden?: boolean | null;
  /**
   * Select the condition of the motorcycle
   */
  condition: 'new' | 'used' | 'certified' | 'custom';
  /**
   * Enter a custom condition
   */
  customCondition?: string | null;
  /**
   * Odometer reading in miles
   */
  mileage?: number | null;
  /**
   * Select the engine type
   */
  engineType: '2-stroke' | '4-stroke' | 'electric' | 'hybrid' | 'custom';
  /**
   * Enter a custom engine type if 'Custom...' was selected above
   */
  customEngineType?: string | null;
  /**
   * Engine displacement in cubic centimeters
   */
  displacement?: number | null;
  /**
   * Select the transmission type
   */
  transmission: 'manual' | 'automatic' | 'semi-automatic' | 'cvt' | 'direct-drive' | 'custom';
  /**
   * Enter a custom transmission type if 'Custom...' was selected above
   */
  customTransmission?: string | null;
  weight: number;
  /**
   * Fuel capacity in liters
   */
  fuelCapacity?: number | null;
  /**
   * Battery capacity in kWh
   */
  batteryCapacity?: number | null;
  /**
   * Select the category of the motorcycle
   */
  category:
    | 'sport'
    | 'cruiser'
    | 'touring'
    | 'adventure'
    | 'naked'
    | 'enduro'
    | 'motocross'
    | 'scooter'
    | 'standard'
    | 'custom'
    | 'supermoto'
    | 'dual-sport'
    | 'dirt-bike'
    | 'custom-category';
  /**
   * Enter a custom category if 'Custom...' was selected above
   */
  customCategory?: string | null;
  colors: {
    color: string;
    id?: string | null;
  }[];
  images: {
    image: string | Media;
    caption?: string | null;
    /**
     * Use this image as the main image for the motorcycle
     */
    primary?: boolean | null;
    id?: string | null;
  }[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'hero';
        value: string | Hero;
      } | null)
    | ({
        relationTo: 'cars';
        value: string | Car;
      } | null)
    | ({
        relationTo: 'manufacturers';
        value: string | Manufacturer;
      } | null)
    | ({
        relationTo: 'motorcycles';
        value: string | Motorcycle;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  fileId?: T;
  _key?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "hero_select".
 */
export interface HeroSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  image?: T;
  cta?:
    | T
    | {
        label?: T;
        url?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cars_select".
 */
export interface CarsSelect<T extends boolean = true> {
  name?: T;
  make?: T;
  model?: T;
  year?: T;
  price?: T;
  condition?: T;
  mileage?: T;
  features?:
    | T
    | {
        feature?: T;
        id?: T;
      };
  description?: T;
  images?:
    | T
    | {
        image?: T;
        caption?: T;
        primary?: T;
        id?: T;
      };
  specifications?:
    | T
    | {
        engineType?: T;
        transmission?: T;
        fuelType?: T;
        mpg?:
          | T
          | {
              city?: T;
              highway?: T;
              combined?: T;
            };
        electricRange?: T;
        color?:
          | T
          | {
              exterior?: T;
              interior?: T;
            };
      };
  availability?: T;
  vin?: T;
  featured?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "manufacturers_select".
 */
export interface ManufacturersSelect<T extends boolean = true> {
  name?: T;
  country?: T;
  logo?: T;
  description?: T;
  vehicleTypes?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "motorcycles_select".
 */
export interface MotorcyclesSelect<T extends boolean = true> {
  name?: T;
  manufacturer?: T;
  description?: T;
  year?: T;
  price?: T;
  featured?: T;
  hidden?: T;
  condition?: T;
  customCondition?: T;
  mileage?: T;
  engineType?: T;
  customEngineType?: T;
  displacement?: T;
  transmission?: T;
  customTransmission?: T;
  weight?: T;
  fuelCapacity?: T;
  batteryCapacity?: T;
  category?: T;
  customCategory?: T;
  colors?:
    | T
    | {
        color?: T;
        id?: T;
      };
  images?:
    | T
    | {
        image?: T;
        caption?: T;
        primary?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}